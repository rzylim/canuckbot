import discord
from discord import app_commands
from discord.ext import commands
from discord.ext.commands import Context, Bot

import CanuckBot
from CanuckBot.Info import Info
from CanuckBot.Manager import Manager
from CanuckBot.utils import timestamp2str
from decorators.checks import is_superadmin, is_full_manager, is_trusted_manager


class ManagerCog(commands.Cog, name="managers"):
    def __init__(self, bot: Bot) -> None:
        self.bot = bot

    @commands.hybrid_group(
        name="mngr",
        description="Manage CanuckBot managers.",
    )
    @commands.has_permissions(manage_messages=True)
    async def mngr(self, context: Context) -> None:
        if context.invoked_subcommand is None:
            embed = discord.Embed(
                description="Please specify a subcommand.\n\n**Subcommands:**\n`add` - Add a new CanuckBot manager.\n`del` - Remove a CanuckBot manager.\n`list` - List all CanuckBot managers.",
                color=0xE02B2B,
            )
            await context.send(embed=embed)

    @mngr.command(
        name="add",
        description="Add a new CanuckBot manager.",
    )
    @is_superadmin()
    @app_commands.describe(
        user="The user to add as a new CanuckBot manager.",
    )
    async def mngr_add(self, context: Context, user: discord.User) -> None:
        assert context.interaction, "ERR managers.py mngr_add: interaction not available."
        invoking_user = context.interaction.user
        manager = Manager(self.bot)
        ret = await manager.add(user.id, invoking_user.id)
        if ret:
            await context.send(f"{user.name} added as a new CanuckBot manager.")
        else:
            await context.send(
                f"ERR: There was an error trying to add {user.name} as a new CanuckBot manager."
            )

    @mngr.command(
        name="del",
        description="Remove a new CanuckBot manager.",
    )
    @is_superadmin()
    @app_commands.describe(
        user="The user to remove as a CanuckBot manager.",
    )
    async def mngr_del(self, context: Context, user: discord.User) -> None:
        m = Manager(self.bot)
        managers = await m.list()

        if CanuckBot.key_value_exists(managers, "userid", user.id):
            await m.remove(user.id)
            await context.send(
                f"{user.name} removed as a CanuckBot manager.", ephemeral=True
            )
        else:
            await context.send(
                f"{user.name} is currently not a CanuckBot manager.", ephemeral=True
            )

    @mngr.command(
        name="list",
        description="List all CanuckBot managers.",
    )
    @is_full_manager()
    # @app_commands.describe(
    # )
    async def mngr_list(self, context: Context):
        m = Manager(self.bot)
        managers = await m.list()

        embed = discord.Embed(title="CanuckBot Managers",
                              color=discord.Color.blue())
        for item in managers:
            dt_added = timestamp2str(item["dt_added"])

            manager = await CanuckBot.get_discord_user(
                context, self.bot, item["userid"]
            )
            if manager:
                _manager = f"{manager.display_name} [{manager.id}]"
            else:
                _manager = f"Error ({manager.id}"

            added_by = await CanuckBot.get_discord_user(
                context, self.bot, item["added_by"]
            )
            if added_by:
                _added_by = f"{added_by.display_name}"
            else:
                _added_by = f"Error [{added_by.id}]"

            if item["userid"] == 138734348299010048:
                embed.add_field(
                    name=f"{_manager}",
                    value=f"Added: {dt_added}\nSuper Manager",
                    inline=False,  # Set to True to make columns
                )
            else:
                embed.add_field(
                    name=f"{_manager}",
                    value=f"Added: {dt_added}\nby: {_added_by}",
                    inline=False,  # Set to True to make columns
                )

        await context.send(embed=embed)

    @mngr.command(
        name="info",
        description="Display information about a manager parameter.",
    )
    @is_full_manager()
    @app_commands.describe(
        field="The field to get info on.",
    )
    async def mngr_info(self, context: Context, field: str = None) -> None:
        manager = await Manager.create(self.bot)

        if not manager.field_exists(field):
            await context.send(f"ERR: manager.{field} is not defined.")
            return

        objinfo = await Info.create(self.bot, "manager", field)
        if objinfo.info == "":
            info = "n/a"
        else:
            info = objinfo.info

        if info:
            await context.send(f"manager.{field} : `{info}`")
        else:
            await context.send(
                "ERR: There was an error trying to get info from the database."
            )

    @mngr.command(
        name="setinfo",
        description="Set information about a configuration parameter.",
    )
    @is_superadmin()
    @app_commands.describe(
        field="The field to set info on.",
    )
    async def mngr_setinfo(
        self, context: Context, field: str = None, info_text: str = None
    ) -> bool:
        objinfo = await Info.create(self.bot, "manager", field)
        if await objinfo.set(info_text):
            await context.send(f"manager.{field} updated : `{info_text}`")
        else:
            await context.send(f"ERR: couldn't update manager.{field}")


# @app_commands.describe(
# actions="Action to execute.",
# user="The user upon which to apply the action",
# )
# @app_commands.choices(actions=[
# app_commands.Choice(name="Add", value=0),
# app_commands.Choice(name="Remove", value=1),
# app_commands.Choice(name="Show", value=2),
# ])

# async def mngr(self, context: Context, actions: discord.app_commands.Choice[int], user: typing.Optional[str]):
# if(actions.value != 2):
# #await context.send(f'Action selected: {actions.name}, User: {user}', ephemeral=True)
# await context.send(f'Action selected: {actions.name}, User: {user}')
# else:
# await context.send(f'Action selected: {actions.name}')
#
# message = "New manager : " + user + " | " + self.bot.config["prefix"]
# embed = discord.Embed(description=message, color=0xBEBEFE)
# await context.send(embed=embed)

# And then we finally add the cog to the bot so that it can load, unload,
# reload and use it's content.


async def setup(bot: Bot) -> None:
    await bot.add_cog(ManagerCog(bot))
